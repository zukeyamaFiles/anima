html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline;
}

html {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

q, blockquote {
  quotes: none;
}
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

a img {
  border: none;
}

article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block;
}

.cf:before,
.cf:after {
  content: " ";
  display: table;
}

.cf:after {
  clear: both;
}

.cf {
  *zoom: 1;
}

.addColor {
  padding: 15px;
  border: 1px solid #999;
}

html, body, .container {
  height: 100%;
  width: 100%;
  overflow: hidden;
  -webkit-perspective: 1200px;
  -moz-perspective: 1200px;
  -ms-perspective: 1200px;
  perspective: 1200px;
}

#overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #000;
  z-index: 99;
  -webkit-transform-style: preserve-3d;
  -moz-transform-style: preserve-3d;
  -o-transform-style: preserve-3d;
  transform-style: preserve-3d;
  -webkit-transition: transform 0.5s;
  -moz-transition: transform 0.5s;
  -ms-transition: transform 0.5s;
  transition: transform 0.5s;
  -webkit-transform: rotateY(0deg);
  -moz-transform: rotateY(0deg);
  -ms-transform: rotateY(0deg);
  transform: rotateY(0deg);
  -webkit-transform-origin: left top;
  -moz-transform-origin: left top;
  -ms-transform-origin: left top;
  transform-origin: left top;
}
#overlay > .img {
  width: 70%;
  height: auto;
  margin: -100px auto 0;
  text-align: center;
}
#overlay > .img img {
  width: 100%;
  height: auto;
}
#overlay.fade {
  -webkit-transition: transform 0.5s;
  -moz-transition: transform 0.5s;
  -ms-transition: transform 0.5s;
  transition: transform 0.5s;
  -webkit-transform: rotateY(-180deg);
  -moz-transform: rotateY(-180deg);
  -ms-transform: rotateY(-180deg);
  transform: rotateY(-180deg);
  -webkit-transform-origin: left top;
  -moz-transform-origin: left top;
  -ms-transform-origin: left top;
  transform-origin: left top;
}
#overlay .inner {
  width: 600px;
  height: 300px;
  position: fixed;
  bottom: 0;
  left: 50%;
  margin-left: -300px;
}
#overlay .inner .btn {
  position: absolute;
  top: 50%;
  width: 300px;
  height: 51px;
  left: 0;
  right: 0;
  font-weight: normal;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
  text-align: center;
  color: #fff;
  background: url(../img/bg_btn.png) no-repeat center top;
  box-sizing: border-box;
  padding-top: 13px;
}
#overlay .inner .btn.start {
  -webkit-animation-name: opaci;
  animation-name: opaci;
  -webkit-animation-duration: 0.05s;
  animation-duration: 0.05s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}
#overlay .inner .restart {
  cursor: pointer;
  display: none;
  position: absolute;
  top: 50%;
  width: 300px;
  margin: 10px auto 0;
  left: 0;
  right: 0;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
  padding: 30px 0;
  text-align: center;
  color: #fff;
  background: url(../img/bg_btn.png) no-repeat center top;
  box-sizing: border-box;
  padding-top: 13px;
}
#overlay .inner .restart.start {
  -webkit-animation-name: opaci;
  animation-name: opaci;
  -webkit-animation-duration: 0.05s;
  animation-duration: 0.05s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
  background: url(../img/bg_btn.png) no-repeat center top;
  box-sizing: border-box;
  padding-top: 13px;
}
#overlay .inner .time {
  font-size: 18px;
  font-weight: bold;
  text-align: center;
  visibility: hidden;
}
#overlay .inner .time.visible {
  visibility: visible;
}
#overlay .inner p {
  text-align: center;
  font-size: 20px;
  color: #fff;
}
#overlay .inner p:not(:last-child) {
  margin-top: 20px;
  font-size: 23px;
}
#overlay .inner p:first-child {
  margin: -50px auto 0;
}
#overlay .inner p.overtime {
  display: none;
  font-size: 36px;
  margin-top: 40px;
}

#stage {
  height: 100%;
  width: 100%;
  position: relative;
}
#stage .stageinner {
  position: absolute;
  top: 50%;
  right: 0;
  left: 0;
  width: 980px;
  margin: -150px auto 0;
  padding: 40px 0;
  word-break: break-all;
  box-shadow: 0px 0px 4px 1px #615b5d;
  -moz-box-shadow: 0px 0px 4px 1px #615b5d;
  -webkit-box-shadow: 0px 0px 4px 1px #615b5d;
}
#stage .stageinner .word {
  text-align: center;
  font-size: 50px;
}
#stage .stageinner .word_label {
  text-align: center;
  font-size: 50px;
  margin-top: 20px;
}

#timerTxt {
  position: absolute;
  left: 20px;
  top: 50px;
  font-size: 40px;
  border: solid 1px #333;
  padding: 20px 50px;
  color: #fff;
  background: #333;
}

@-webkit-keyframes opaci {
  from, 50%, to {
    opacity: 1;
  }
  25%, 75% {
    opacity: 0;
  }
}
@-moz-keyframes opaci {
  from, 50%, to {
    opacity: 1;
  }
  25%, 75% {
    opacity: 0;
  }
}
@-ms-keyframes opaci {
  from, 50%, to {
    opacity: 1;
  }
  25%, 75% {
    opacity: 0;
  }
}
@keyframes opaci {
  from, 50%, to {
    opacity: 1;
  }
  25%, 75% {
    opacity: 0;
  }
}
.addColor {
  color: red;
}



/*# sourceMappingURL=data:application/json;base64, */
